[project]
name = "torch-starter"
version = "0.1.0"
description = "Simplified PyTorch development environment with CUDA 12.9 support"
requires-python = ">=3.11"
license = { text = "MIT" }
authors = [{ name = "Your Name", email = "your.email@example.com" }]

dependencies = [
    # Core scientific computing
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    "scikit-learn>=1.3.0",
    "matplotlib>=3.7.0",
    
    # PyTorch ecosystem
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "torchaudio>=2.0.0",
    
    # Hugging Face ecosystem
    "transformers>=4.30.0",
    "datasets>=2.12.0",
    "accelerate>=0.20.0",
    "safetensors>=0.3.0",
    
    # Data validation and serialization
    "pydantic>=2.0.0",
    
    # Code quality and type checking
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    
    # Utilities
    "tqdm>=4.65.0",
    "pyyaml>=6.0",
    "python-dotenv>=1.0.0",
    "requests>=2.31.0",
    
    # Jupyter
    "jupyter>=1.0.0",
    "ipykernel>=6.23.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
]

vis = [
    # Visualization
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
]

gpu = [
    # GPU utilities
    "nvidia-ml-py>=12.535.0",
]

all = ["torch-starter[dev,vis,gpu]"]

[build-system]
requires = ["hatchling>=1.25.0"]
build-backend = "hatchling.build"

# ==============================================================================
# UV CONFIGURATION
# ==============================================================================
[tool.uv]
index-strategy = "unsafe-best-match"
resolution = "highest"
compile-bytecode = true

[tool.uv.pip]
extra-index-url = [
    "https://download.pytorch.org/whl/cu121",
]

# ==============================================================================
# RUFF CONFIGURATION
# ==============================================================================
[tool.ruff]
line-length = 100
target-version = "py311"
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "build",
    "dist",
    "data/",
    "logs/",
    "models/",
]

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C90",    # mccabe complexity
    "D",      # pydocstyle (docstring conventions)
    "N",      # pep8-naming
    "S",      # flake8-bandit (security)
    "T20",    # flake8-print
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate (commented code)
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "D100",   # Missing docstring in public module
    "D101",   # Missing docstring in public class (handled case-by-case)
    "D102",   # Missing docstring in public method (handled case-by-case)
    "D103",   # Missing docstring in public function (handled case-by-case)
    "D104",   # Missing docstring in public package
    "D105",   # Missing docstring in magic method
    "D107",   # Missing docstring in __init__
    "S101",   # Use of assert (allow in tests and development)
    "T201",   # print found (allow in scripts and examples)
    "ERA001", # Commented out code (sometimes needed for examples)
]

# Docstring convention
[tool.ruff.lint.pydocstyle]
convention = "google"

# Per-file ignores
[tool.ruff.lint.per-file-ignores]
"tests/*" = ["D", "S101", "ARG"]  # Allow missing docstrings and asserts in tests
"examples/*" = ["D", "T201", "S101"]  # Allow missing docstrings and prints in examples
"verify_setup/*" = ["D", "T201", "S101"]  # Allow missing docstrings and prints in verification scripts
"scripts/*" = ["D", "T201", "S101"]  # Allow missing docstrings and prints in scripts

[tool.ruff.lint.isort]
known-first-party = ["torch_starter"]

# ==============================================================================
# MYPY CONFIGURATION - Strict typing enforcement
# ==============================================================================
[tool.mypy]
python_version = "3.11"

# Strict mode enables all strict options
strict = true

# Additional strict options (explicit for clarity)
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
warn_unreachable = true
strict_optional = true
strict_equality = true

# Type checking strictness
disallow_any_unimported = true
disallow_any_expr = false  # Too restrictive for ML code
disallow_any_decorated = false  # Decorators often lack type info
disallow_any_explicit = false  # Allow explicit Any when needed
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
check_untyped_defs = true

# Error reporting
show_error_codes = true
show_error_context = true
show_column_numbers = true
pretty = true

# Performance
cache_dir = ".mypy_cache"
sqlite_cache = true
incremental = true

# Exclude directories
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "__pycache__/",
    ".mypy_cache/",
    ".pytest_cache/",
    "data/",
    "logs/",
    "models/",
]

# Third-party library overrides
[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "torchaudio.*",
    "transformers.*",
    "datasets.*",
    "accelerate.*",
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "plotly.*",
    "pydantic.*",
    "numpy.*",
    "pandas.*",
    "jupyter.*",
    "ipykernel.*",
    "tqdm.*",
    "requests.*",
    "yaml.*",
    "dotenv.*",
]
ignore_missing_imports = true

# Test files can be less strict
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false

# ==============================================================================
# PYTEST CONFIGURATION
# ==============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--tb=short",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow",
    "gpu: marks tests that require GPU",
]